
{
  "logic_puzzles": [
    {
      "id": 1,
      "type": "visual_bug",
      "title": "Spot the Assignment Error",
      "description": "Examine the C code snippet below. Which line contains a logical error that will cause unexpected behavior?",
      "code": "1: int x = 10;\n2: if (x = 5) {\n3:     printf(\"x is 5\");\n4: }",
      "correct_answer": "Line 2: Using assignment (=) instead of comparison (==)",
      "options": [
        "Line 1: Incorrect variable declaration",
        "Line 2: Using assignment (=) instead of comparison (==)",
        "Line 3: Missing semicolon",
        "No error, the code is correct"
      ],
      "difficulty": "medium",
      "topic": "Conditionals"
    },
    {
      "id": 2,
      "type": "output_prediction",
      "title": "Pointer Value Prediction",
      "description": "What will be the output of the following C code?",
      "code": "#include <stdio.h>\nint main() {\n    int num = 25;\n    int *ptr = &num;\n    *ptr = 100;\n    printf(\"%d\", num);\n    return 0;\n}",
      "correct_answer": "100",
      "options": [
        "25",
        "100",
        "A memory address",
        "Compilation Error"
      ],
      "difficulty": "medium",
      "topic": "Pointers"
    },
    {
      "id": 3,
      "type": "visual_bug",
      "title": "Array Index Out of Bounds",
      "description": "This C code has an issue with array access. Which line will cause a problem?",
      "code": "1: int main() {\n2:     int arr[5] = {10, 20, 30, 40, 50};\n3:     printf(\"%d\", arr[5]);\n4:     return 0;\n5: }",
      "correct_answer": "Line 3: Accessing an index that is out of bounds",
      "options": [
        "Line 2: Incorrect array initialization",
        "Line 3: Accessing an index that is out of bounds",
        "Line 4: Missing return value",
        "No error, it will print 0"
      ],
      "difficulty": "easy",
      "topic": "Arrays"
    },
    {
      "id": 4,
      "type": "output_prediction",
      "title": "Loop Output",
      "description": "What is the final value of 'sum' after the loop finishes?",
      "code": "int sum = 0;\nfor (int i = 1; i <= 4; i++) {\n    sum += i;\n}",
      "correct_answer": "10",
      "options": ["6", "10", "15", "The code has an error"],
      "difficulty": "easy",
      "topic": "Loops"
    },
    {
        "id": 5,
        "type": "visual_bug",
        "title": "Format Specifier Mismatch",
        "description": "Identify the error in this C printf statement.",
        "code": "1: int main() {\n2:     int number = 99;\n3:     printf(\"The number is: %f\", number);\n4:     return 0;\n5: }",
        "correct_answer": "Line 3: Incorrect format specifier for int type",
        "options": [
          "Line 2: Variable not initialized",
          "Line 3: Incorrect format specifier for int type",
          "Line 3: String is missing a newline character",
          "No error, it will print 99.000000"
        ],
        "difficulty": "hard",
        "topic": "Variables"
      }
  ],
  "tech_trivia": [
    {
      "id": 1,
      "question": "Which operator is used to get the memory address of a variable in C?",
      "correct_answer": "& (Ampersand)",
      "options": [
        "* (Asterisk)",
        "& (Ampersand)",
        "% (Percent)",
        "# (Hash)"
      ],
      "category": "Pointers",
      "difficulty": "easy"
    },
    {
      "id": 2,
      "question": "In C, what is the index of the first element in an array?",
      "correct_answer": "0",
      "options": [
        "1",
        "0",
        "-1",
        "It depends on the array size"
      ],
      "category": "Arrays",
      "difficulty": "easy"
    },
    {
      "id": 3,
      "question": "Which of the following is an exit-controlled loop?",
      "correct_answer": "do-while loop",
      "options": [
        "for loop",
        "while loop",
        "do-while loop",
        "if-else statement"
      ],
      "category": "Loops",
      "difficulty": "medium"
    },
    {
      "id": 4,
      "question": "What is the correct way to declare a variable that will store a whole number in C?",
      "correct_answer": "int score = 100;",
      "options": [
        "number score = 100;",
        "var score = 100;",
        "int score = 100;",
        "score = 100;"
      ],
      "category": "Variables",
      "difficulty": "easy"
    },
    {
        "id": 5,
        "question": "What is the purpose of the 'break' statement inside a 'switch' block?",
        "correct_answer": "To terminate the switch statement and prevent fall-through",
        "options": [
          "To skip the current case",
          "To terminate the switch statement and prevent fall-through",
          "To return a value from the function",
          "To indicate an error"
        ],
        "category": "Conditionals",
        "difficulty": "medium"
    }
  ],
  "word_scrambles": [
    {
      "id": 1,
      "scrambled": "RRAYA",
      "correct_answer": "ARRAY",
      "hint": "A collection of elements of the same data type.",
      "category": "C Keywords"
    },
    {
      "id": 2,
      "scrambled": "NOPTRIE",
      "correct_answer": "POINTER",
      "hint": "A variable that stores a memory address.",
      "category": "C Keywords"
    },
    {
      "id": 3,
      "scrambled": "OFR",
      "correct_answer": "FOR",
      "hint": "A common type of loop in C.",
      "category": "C Keywords"
    },
    {
      "id": 4,
      "scrambled": "FLEESI",
      "correct_answer": "ELSEIF",
      "hint": "Used for multi-way conditional branching.",
      "category": "C Keywords"
    },
    {
      "id": 5,
      "scrambled": "AALRVEBI",
      "correct_answer": "VARIABLE",
      "hint": "A named storage location.",
      "category": "C Concepts"
    }
  ],
  "drag_drop_code": [
    {
      "id": 1,
      "title": "Construct a For Loop",
      "description": "Arrange the code blocks to create a C 'for' loop that prints numbers from 0 to 4.",
      "code_blocks": ["for (int i = 0; i < 5; i++) {", "    printf(\"%d\\n\", i);", "}"],
      "correct_order": [0, 1, 2],
      "difficulty": "easy",
      "topic": "Loops"
    },
    {
      "id": 2,
      "title": "If-Else Statement",
      "description": "Arrange the code blocks to check if a number is positive or non-positive.",
      "code_blocks": [
        "int num = -5;",
        "if (num > 0) {",
        "    printf(\"Positive\");",
        "} else {",
        "    printf(\"Non-positive\");",
        "}"
      ],
      "correct_order": [0, 1, 2, 3, 4, 5],
      "difficulty": "medium",
      "topic": "Conditionals"
    },
    {
      "id": 3,
      "title": "Use a Pointer",
      "description": "Arrange the blocks to declare a variable and a pointer, and then change the variable's value using the pointer.",
      "code_blocks": [
        "int val = 10;",
        "int *p;",
        "p = &val;",
        "*p = 20;",
        "printf(\"%d\", val);"
      ],
      "correct_order": [0, 1, 2, 3, 4],
      "difficulty": "hard",
      "topic": "Pointers"
    },
    {
      "id": 4,
      "title": "Iterate Through an Array",
      "description": "Arrange the code to initialize an array and print all its elements.",
      "code_blocks": [
        "int ages[] = {22, 25, 30};",
        "for (int i = 0; i < 3; i++) {",
        "    printf(\"%d \", ages[i]);",
        "}"
      ],
      "correct_order": [0, 1, 2, 3],
      "difficulty": "medium",
      "topic": "Arrays"
    }
  ]
}
